/*
 * Trading Anarchy Android Compute Engine
 * Professional Android Application Build Configuration
 * Copyright 2025 Trading Anarchy Development Team
 */

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlinx-serialization'
}

// Remove direct dependency on com.android.build.OutputFile which may not be
// available across different Android Gradle Plugin (AGP) versions.
// We'll use a compatibility-safe approach below when computing ABI-specific
// version code overrides.

// Trading Anarchy version management
Properties props = new Properties()
props.load(new FileInputStream("$project.rootDir/../version.properties"))
props.each { prop ->
    project.ext.set(prop.key, prop.value)
}

project.ext.set("versionName", "${project.ext.majorVersion}.${project.ext.minorVersion}.${project.ext.patchVersion}")
def __maj = (project.hasProperty('majorVersion') ? project.majorVersion.toInteger() : 2025)
def __min = (project.hasProperty('minorVersion') ? project.minorVersion.toInteger() : 1)
def __pat = (project.hasProperty('patchVersion') ? project.patchVersion.toInteger() : 0)
project.ext.set('versionCode', __maj * 1000 + __min * 100 + __pat)

// React Native configuration optimized for 2025
project.ext.react = [
    enableHermes: true,
    bundleInDebug: false,
    bundleInRelease: true,
    bundleCommand: "ram-bundle",
    hermesCommand: "../../node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc",
    cliPath: "node_modules/react-native/cli.js",
    nodeExecutableAndArgs: ["node"],
    extraPackagerArgs: [
        "--reset-cache",
        "--config=metro.config.js"
    ],
    inputExcludes: ["android/**", "ios/**", "**/*.test.js", "**/*.test.ts"],
    enableCodePush: false
]

apply from: "../../node_modules/react-native/react.gradle"

// Build optimization settings
def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = true
def enableHermes = project.ext.react.get("enableHermes", true)

// JavaScript engine configuration
def jscFlavor = 'org.webkit:android-jsc:+'

def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
    namespace 'com.tradinganarchy.compute'
    ndkVersion rootProject.ext.ndkVersion
    compileSdk rootProject.ext.compileSdkVersion
    
    // Java compatibility for 2025
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    
    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += [
            "-Xjsr305=strict",
            "-Xopt-in=kotlin.RequiresOptIn",
            "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
        ]
    }

    defaultConfig {
        applicationId 'com.tradinganarchy.compute'
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        versionCode project.ext.get("versionCode")
        versionName project.ext.get("versionName")
        
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
        buildConfigField "String", "APP_NAME", '"Trading Anarchy Compute Engine"'
        buildConfigField "String", "BUILD_TIME", "\"${new Date().format('yyyy-MM-dd HH:mm:ss')}\""
        
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        
        // Native library optimization
        ndk {
            abiFilters (*reactNativeArchitectures())
        }
        
        // ProGuard configuration for release builds
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false
            include (*reactNativeArchitectures())
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled false
            shrinkResources false
            testCoverageEnabled true
            
            buildConfigField "boolean", "DEBUG_MODE", "true"
            resValue "string", "app_name", "Trading Anarchy CE Debug"
        }
        
        release {
            debuggable false
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources enableProguardInReleaseBuilds
            zipAlignEnabled true
            
            buildConfigField "boolean", "DEBUG_MODE", "false"
            resValue "string", "app_name", "Trading Anarchy Compute Engine"
            
            // Enhanced security for production
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        
        benchmark {
            initWith release
            matchingFallbacks = ['release']
            debuggable false
            proguardFiles 'benchmark-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    // Architecture-specific version codes
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = [
                "armeabi-v7a": 1,
                "arm64-v8a": 3,
                "x86": 2,
                "x86_64": 4
            ]

            // Attempt modern and legacy ways to read ABI filter
            def abi = null
            try {
                if (output.respondsTo('getFilter')) {
                    def f = output.getFilter('ABI')
                    if (f != null) abi = f
                } else if (output.respondsTo('getFilters')) {
                    def filters = output.getFilters()
                    filters.each { fil -> if (fil.getFilterType().name().toUpperCase() == 'ABI') { abi = fil.getIdentifier() } }
                } else if (output.metaClass.respondsTo(output, 'getFilter', [String])) {
                    def f = output.getFilter('ABI')
                    if (f != null) abi = f
                } else {
                    // Some AGP versions expose filters as a property
                    if (output.filters != null) {
                        output.filters.each { fil -> if (fil.filterType.name().toUpperCase() == 'ABI') { abi = fil.identifier } }
                    }
                }
            } catch (ignored) {
                // ignore and fallback
            }

            if (abi != null && defaultConfig.versionCode != null) {
                try {
                    output.versionCodeOverride = defaultConfig.versionCode.toInteger() * 1000 + (versionCodes.get(abi) ?: 0)
                } catch (e) {
                    // if direct assignment fails on some AGP versions, try alternative property
                    try { output.setProperty('versionCodeOverride', defaultConfig.versionCode.toInteger() * 1000 + (versionCodes.get(abi) ?: 0)) } catch(ignore) {}
                }
            }
        }
    }
    
    // Build features for 2025
    buildFeatures {
        buildConfig true
        viewBinding true
        dataBinding false
    }
    
    // Packaging options
    packagingOptions {
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libjsc.so'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }
    
    // Lint options
    lint {
        checkReleaseBuilds false
        abortOnError false
        disable 'InvalidPackage'
    }
    
    // Test options
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    
    // React Native core
    implementation("com.facebook.react:react-android")
    implementation("com.facebook.react:flipper-integration")
    
    // Hermes JavaScript Engine
    if (enableHermes) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
    
    // AndroidX libraries (2025 versions)
    implementation 'androidx.core:core-ktx:1.15.0'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.activity:activity-ktx:1.9.3'
    implementation 'androidx.fragment:fragment-ktx:1.8.5'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference-ktx:1.2.1'
    
    // Material Design Components
    implementation 'com.google.android.material:material:1.12.0'
    
    // MultiDex support
    implementation 'androidx.multidex:multidex:2.0.1'
    
    // Kotlin libraries
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.9.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.3'
    
    // Network libraries
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    
    // Database (Room)
    def room_version = "2.6.1"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    
    // Work Manager
    def work_version = "2.10.0"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation "androidx.work:work-multiprocess:$work_version"
    
    // Lifecycle components
    def lifecycle_version = "2.8.7"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    
    // EventBus
    implementation 'org.greenrobot:eventbus:3.3.1'
    
    // React Native specific dependencies
    implementation project(':react-native-splash-screen')
    
    // Testing dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.14.2'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.9.0'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation 'androidx.test:runner:1.6.2'
    
    // Debug dependencies
    debugImplementation 'com.facebook.flipper:flipper:0.264.0'
    debugImplementation 'com.facebook.flipper:flipper-network-plugin:0.264.0'
    debugImplementation 'com.facebook.soloader:soloader:0.12.1'
    
    // LeakCanary for memory leak detection
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.14'
}

// New Architecture support
if (isNewArchitectureEnabled()) {
    configurations.all {
        resolutionStrategy.dependencySubstitution {
            substitute(module("com.facebook.react:react-native"))
                    .using(project(":ReactAndroid"))
                    .because("Building React Native from source for New Architecture")
            substitute(module("com.facebook.react:hermes-android"))
                    .using(project(":ReactAndroid:hermes-engine"))
                    .because("Building Hermes from source for New Architecture")
        }
    }
}

// Gradle performance optimization
configurations.all {
    resolutionStrategy {
        force 'org.jetbrains.kotlin:kotlin-stdlib:' + kotlinVersion
        force 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:' + kotlinVersion
    }
}

// Build dependency copying task
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

// Apply React Native community modules
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle")
applyNativeModulesAppBuildGradle(project)

// Vector icons fonts
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

def isNewArchitectureEnabled() {
    return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}
