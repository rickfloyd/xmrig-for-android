# Trading Anarchy Android Compute Engine - GitHub Actions CI/CD Pipeline
# 2025 Professional Version with comprehensive build, test, and deployment automation

name: Trading Anarchy Android CI/CD

on:
  push:
    branches: [ main, develop, 'release/**' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      deploy_to_firebase:
        description: 'Deploy to Firebase App Distribution'
        required: false
        default: false
        type: boolean

env:
  # Project Configuration
  PROJECT_NAME: "Trading Anarchy Android Compute Engine"
  PACKAGE_NAME: "com.tradinganarchy.computeengine"
  # Secret placeholders for local/dev runs (set real secrets in repository for production)
  ANDROID_KEYSTORE_BASE64: ''
  ANDROID_KEYSTORE_PASSWORD: ''
  ANDROID_KEY_PASSWORD: ''
  DEBUG_KEYSTORE_BASE64: ''
  SONAR_TOKEN: ''
  CODECOV_TOKEN: ''
  FIREBASE_SERVICE_ACCOUNT_KEY: ''
  FIREBASE_APP_ID: ''

  # Android Configuration
  ANDROID_COMPILE_SDK: 35
  ANDROID_BUILD_TOOLS_VERSION: 35.0.0
  ANDROID_TARGET_SDK: 35
  ANDROID_MIN_SDK: 24
  NDK_VERSION: 27.2.12479018
  
  # Node.js Configuration
  NODE_VERSION: '20'
  
  # Java Configuration
  JAVA_VERSION: '17'
  
  # Build Configuration
  BUILD_TYPE: ${{ github.event.inputs.build_type || (startsWith(github.ref, 'refs/tags/') && 'release' || 'debug') }}
  SKIP_TESTS: ${{ github.event.inputs.skip_tests || 'false' }}

jobs:
  # Security and Code Quality
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, cpp, java
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Lint and Code Quality
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint --if-present
      
      - name: Run Prettier
        run: npm run format:check --if-present
      
      - name: TypeScript type checking
        run: npx tsc --noEmit
      
      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        continue-on-error: true

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run Jest tests
        run: npm test -- --coverage --watchAll=false
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ env.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true
      
      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml

  # Native Library Build
  build-native:
    name: Build Native Libraries
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: ${{ env.NDK_VERSION }}
      
      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.28.0'
      
      - name: Build native libraries
        run: |
          mkdir -p build/cmake
          cd build/cmake
          cmake ../../ \
            -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake" \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_NATIVE_API_LEVEL=${{ env.ANDROID_MIN_SDK }} \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON
          cmake --build . --config Release --parallel $(nproc)
      
      - name: Archive native libraries
        uses: actions/upload-artifact@v4
        with:
          name: native-libraries
          path: build/cmake/**/*.so

  # Android Build
  build-android:
    name: Build Android App
    runs-on: ubuntu-latest
    needs: [lint, build-native]
    if: always() && (needs.lint.result == 'success' && needs.build-native.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: ${{ env.ANDROID_COMPILE_SDK }}
          build-tools: ${{ env.ANDROID_BUILD_TOOLS_VERSION }}
          ndk: ${{ env.NDK_VERSION }}
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download native libraries
        uses: actions/download-artifact@v4
        with:
          name: native-libraries
          path: native-libs/
      
      - name: Generate version information
        run: |
          VERSION_MAJOR=2025
          VERSION_MINOR=1
          VERSION_PATCH=0
          VERSION_CODE=$((VERSION_MAJOR * 1000 + VERSION_MINOR * 100 + VERSION_PATCH + GITHUB_RUN_NUMBER))
          VERSION_NAME="${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}.${GITHUB_RUN_NUMBER}"
          
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          
          mkdir -p build
          cat > build/version.properties << EOF
          versionMajor=$VERSION_MAJOR
          versionMinor=$VERSION_MINOR
          versionPatch=$VERSION_PATCH
          versionCode=$VERSION_CODE
          versionName=$VERSION_NAME
          buildDate=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          gitCommit=${GITHUB_SHA::8}
          buildNumber=$GITHUB_RUN_NUMBER
          EOF
      
      - name: Build React Native bundle
        run: |
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output build/index.android.bundle \
            --assets-dest build/drawable-*
      
      - name: Setup keystore for release builds
        if: env.BUILD_TYPE == 'release'
        run: |
          mkdir -p keystores
          echo "${{ env.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > keystores/trading-anarchy-release.keystore
      
      - name: Build Debug APK
        if: env.BUILD_TYPE == 'debug'
        run: |
          cd android
          ./gradlew assembleDebug \
            -PversionCode=$VERSION_CODE \
            -PversionName=$VERSION_NAME
      
      - name: Build Release APK and AAB
        if: env.BUILD_TYPE == 'release'
        run: |
          cd android
          ./gradlew assembleRelease bundleRelease \
            -PversionCode=$VERSION_CODE \
            -PversionName=$VERSION_NAME \
            -PMYAPP_UPLOAD_STORE_FILE="../keystores/trading-anarchy-release.keystore" \
            -PMYAPP_UPLOAD_KEY_ALIAS="trading-anarchy-key" \
            -PMYAPP_UPLOAD_STORE_PASSWORD="${{ env.ANDROID_KEYSTORE_PASSWORD }}" \
            -PMYAPP_UPLOAD_KEY_PASSWORD="${{ env.ANDROID_KEY_PASSWORD }}"
      
      - name: Sign Debug APK
        if: env.BUILD_TYPE == 'debug'
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: android/app/build/outputs/apk/debug
          signingKeyBase64: ${{ env.DEBUG_KEYSTORE_BASE64 }}
          alias: androiddebugkey
          keyStorePassword: android
          keyPassword: android
      
      - name: Rename APK files
        run: |
          cd android/app/build/outputs/apk
          if [ "$BUILD_TYPE" = "debug" ]; then
            mv debug/app-debug.apk "debug/TradingAnarchy-${VERSION_NAME}-debug.apk"
          else
            mv release/app-release.apk "release/TradingAnarchy-${VERSION_NAME}-release.apk"
          fi
      
      - name: Rename AAB file
        if: env.BUILD_TYPE == 'release'
        run: |
          cd android/app/build/outputs/bundle/release
          mv app-release.aab "TradingAnarchy-${VERSION_NAME}-release.aab"
      
      - name: Generate build documentation
        run: |
          mkdir -p output/docs
          cat > output/BUILD_INFO.md << EOF
          # Trading Anarchy Android Compute Engine - Build Information
          
          ## Version
          - **Version**: $VERSION_NAME
          - **Version Code**: $VERSION_CODE
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Git Commit**: ${GITHUB_SHA::8}
          - **Build Type**: $BUILD_TYPE
          - **GitHub Run**: $GITHUB_RUN_NUMBER
          
          ## Features
          - XMRig-based cryptocurrency mining engine
          - React Native 0.76.5 with New Architecture
          - Android API Level $ANDROID_TARGET_SDK target
          - Native C++ libraries with CMake
          - Hardware acceleration support
          - Thermal and battery management
          - Secure mining protocols (SSL/TLS)
          
          ## Build Configuration
          - **NDK Version**: $NDK_VERSION
          - **Compile SDK**: $ANDROID_COMPILE_SDK
          - **Target SDK**: $ANDROID_TARGET_SDK
          - **Min SDK**: $ANDROID_MIN_SDK
          - **Build Tools**: $ANDROID_BUILD_TOOLS_VERSION
          - **Java Version**: $JAVA_VERSION
          - **Node.js Version**: $NODE_VERSION
          
          ## Workflow Information
          - **Trigger**: $GITHUB_EVENT_NAME
          - **Branch**: $GITHUB_REF_NAME
          - **Actor**: $GITHUB_ACTOR
          - **Repository**: $GITHUB_REPOSITORY
          EOF
      
      - name: Upload Debug APK
        if: env.BUILD_TYPE == 'debug'
        uses: actions/upload-artifact@v4
        with:
          name: trading-anarchy-debug-apk
          path: android/app/build/outputs/apk/debug/TradingAnarchy-*.apk
      
      - name: Upload Release APK
        if: env.BUILD_TYPE == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: trading-anarchy-release-apk
          path: android/app/build/outputs/apk/release/TradingAnarchy-*.apk
      
      - name: Upload Release AAB
        if: env.BUILD_TYPE == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: trading-anarchy-release-aab
          path: android/app/build/outputs/bundle/release/TradingAnarchy-*.aab
      
      - name: Upload build information
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: |
            output/BUILD_INFO.md
            build/version.properties

  # Firebase App Distribution (Optional)
  deploy-firebase:
    name: Deploy to Firebase App Distribution
    runs-on: ubuntu-latest
    needs: [build-android]
    env:
      VERSION_NAME: "2025.1.0"
      BUILD_TYPE: "debug"
    if: |
      always() && 
      needs.build-android.result == 'success' && 
      (github.event.inputs.deploy_to_firebase == 'true' || 
       (github.ref == 'refs/heads/main' && github.event.inputs.build_type == 'debug'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: trading-anarchy-${{ env.BUILD_TYPE }}-apk
          path: apk/
      
      - name: Deploy to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ env.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ env.FIREBASE_SERVICE_ACCOUNT_KEY }}
          groups: testers,internal
          file: apk/TradingAnarchy-*.apk
          releaseNotes: |
            Trading Anarchy Android Compute Engine
            Build: ${{ env.VERSION_NAME }}
            Commit: ${{ github.sha }}
            
            Automated build from GitHub Actions
        continue-on-error: true

  # GitHub Release (for tagged versions)
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-android, test]
    if: |
      always() && 
      startsWith(github.ref, 'refs/tags/v') && 
      needs.build-android.result == 'success' && 
      (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: trading-anarchy-release-apk
          path: release-artifacts/
      
      - name: Download Release AAB
        uses: actions/download-artifact@v4
        with:
          name: trading-anarchy-release-aab
          path: release-artifacts/
      
      - name: Download build info
        uses: actions/download-artifact@v4
        with:
          name: build-info
          path: release-artifacts/
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-artifacts/TradingAnarchy-*.apk
            release-artifacts/TradingAnarchy-*.aab
            release-artifacts/BUILD_INFO.md
          body: |
            ## Trading Anarchy Android Compute Engine Release
            
            ### What's New
            - Enhanced XMRig integration with 2025 optimizations
            - Improved thermal and battery management
            - React Native 0.76.5 with New Architecture
            - Android API Level 35 support
            - Advanced security features
            
            ### Files
            - **APK**: Direct installation file for Android devices
            - **AAB**: App Bundle for Google Play Store distribution
            - **BUILD_INFO.md**: Detailed build information
            
            ### Installation
            1. Download the APK file
            2. Enable "Install from unknown sources" on your Android device
            3. Install the APK file
            
            ### Requirements
            - Android 7.0 (API level 24) or higher
            - ARMv8-A 64-bit processor recommended
            - 4GB RAM minimum, 8GB recommended
            - Sufficient storage space
            
            Built with ❤️ by Trading Anarchy Team
          draft: false
          prerelease: contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notification
  notify:
    name: Build Notification
    runs-on: ubuntu-latest
    needs: [security-analysis, lint, test, build-android]
    if: always()
    env:
      VERSION_NAME: "2025.1.0"
      BUILD_TYPE: "debug"
    
    steps:
      - name: Notify Success
        if: |
          needs.security-analysis.result == 'success' && 
          needs.lint.result == 'success' && 
          (needs.test.result == 'success' || needs.test.result == 'skipped') && 
          needs.build-android.result == 'success'
        run: |
          echo "✅ Build completed successfully!"
          echo "Build Type: ${{ env.BUILD_TYPE }}"
          echo "Version: ${{ env.VERSION_NAME }}"
      
      - name: Notify Failure
        if: |
          needs.security-analysis.result == 'failure' || 
          needs.lint.result == 'failure' || 
          needs.test.result == 'failure' || 
          needs.build-android.result == 'failure'
        run: |
          echo "❌ Build failed!"
          echo "Security Analysis: ${{ needs.security-analysis.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Android Build: ${{ needs.build-android.result }}"
          exit 1